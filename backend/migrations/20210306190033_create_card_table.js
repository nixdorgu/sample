exports.up = function (knex) {
  return knex.raw(`
    CREATE TABLE practice.card(
        id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        question TEXT NOT NULL,
        answer TEXT NOT NULL,
        review_after TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
        spacing INTEGER NOT NULL CHECK(spacing >= 0) DEFAULT 0,
        ease_factor NUMERIC(7, 4) NOT NULL CHECK(ease_factor >= 1.3) DEFAULT 2.5,
        seq INTEGER NOT NULL CHECK(seq >= 0) DEFAULT 0,
        archived BOOLEAN NOT NULL DEFAULT FALSE,
        person_id INTEGER REFERENCES practice.person(id),
        created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
    );

    CREATE INDEX card_review_after_idx ON practice.card(review_after);
    CREATE INDEX card_archived_idx ON practice.card(archived);
    CREATE INDEX card_person_id_idx ON practice.card(person_id);

    COMMENT ON TABLE practice.card IS 'An individual flash card';
    COMMENT ON COLUMN practice.card.id IS 'The primary unique identifier for the flash card';
    COMMENT ON COLUMN practice.card.question IS 'The question to prompt the person';
    COMMENT ON COLUMN practice.card.answer IS 'The answer to the question';
    COMMENT ON COLUMN practice.card.archived IS 'The archive status of the card';

    COMMENT ON COLUMN practice.card.review_after IS '@omit create,update
    The next time the card should be reviewed';
    COMMENT ON COLUMN practice.card.spacing IS '@omit create,update
    The current spacing in days between revisions';
    COMMENT ON COLUMN practice.card.ease_factor IS '@omit create,update
    The ease at which the answer was last remembered';
    COMMENT ON COLUMN practice.card.seq IS '@omit create,update
    Controls the order in which to review cards';
    COMMENT ON COLUMN practice.card.person_id IS '@omit create,update
    The owner of the card';
    COMMENT ON COLUMN practice.card.created_at IS '@omit create,update
    The time the card was created';
  `);
};

exports.down = function (knex) {
  return knex.raw(`DROP TABLE practice.card`);
};
